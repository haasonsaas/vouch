name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build binaries
        run: |
          # Linux AMD64
          GOOS=linux GOARCH=amd64 go build -ldflags "-X main.Version=${{ github.ref_name }}" -o vouch-server-linux-amd64 ./server
          GOOS=linux GOARCH=amd64 go build -ldflags "-X main.Version=${{ github.ref_name }}" -o vouch-agent-linux-amd64 ./agent
          GOOS=linux GOARCH=amd64 go build -ldflags "-X main.Version=${{ github.ref_name }}" -o vouch-linux-amd64 ./cli
          
          # Linux ARM64
          GOOS=linux GOARCH=arm64 go build -ldflags "-X main.Version=${{ github.ref_name }}" -o vouch-server-linux-arm64 ./server
          GOOS=linux GOARCH=arm64 go build -ldflags "-X main.Version=${{ github.ref_name }}" -o vouch-agent-linux-arm64 ./agent
          GOOS=linux GOARCH=arm64 go build -ldflags "-X main.Version=${{ github.ref_name }}" -o vouch-linux-arm64 ./cli
          
          # macOS AMD64
          GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.Version=${{ github.ref_name }}" -o vouch-server-darwin-amd64 ./server
          GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.Version=${{ github.ref_name }}" -o vouch-agent-darwin-amd64 ./agent
          GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.Version=${{ github.ref_name }}" -o vouch-darwin-amd64 ./cli
          
          # macOS ARM64
          GOOS=darwin GOARCH=arm64 go build -ldflags "-X main.Version=${{ github.ref_name }}" -o vouch-server-darwin-arm64 ./server
          GOOS=darwin GOARCH=arm64 go build -ldflags "-X main.Version=${{ github.ref_name }}" -o vouch-agent-darwin-arm64 ./agent
          GOOS=darwin GOARCH=arm64 go build -ldflags "-X main.Version=${{ github.ref_name }}" -o vouch-darwin-arm64 ./cli

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            vouch-server-*
            vouch-agent-*
            vouch-*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta-server
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}-server
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Build and push server
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.server
          push: true
          tags: ${{ steps.meta-server.outputs.tags }}
          labels: ${{ steps.meta-server.outputs.labels }}
          platforms: linux/amd64,linux/arm64

      - name: Extract metadata (agent)
        id: meta-agent
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}-agent
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Build and push agent
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.agent
          push: true
          tags: ${{ steps.meta-agent.outputs.tags }}
          labels: ${{ steps.meta-agent.outputs.labels }}
          platforms: linux/amd64,linux/arm64
